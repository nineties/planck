==================
Object File Format
==================

The bytecode encoding of PlanckIR has the following characteristics.

- It has complete information of types. Enables strict type inference, type checking,
  and other program analysis at link time and runtime.
- It does not use information that depends on the location of the data, such as address or offset.
- The entire object file is also represented as a one of Planck object.
- Fast and compact serialization format.

Encoding of Types
==================

**The byte-order is always little endian.**

+----------+------------------+------------------------------------------------+
| 1st byte | following bytes  | type constructor                               |
+==========+==================+================================================+
| 0xxxxxxx | args             | User defined type whose index is upto 127      |
+----------+------------------+------------------------------------------------+
| 1000xxxx | xxx args         | Tuple type whose length is upto 15             |
+----------+------------------+------------------------------------------------+
| 1001xxxx | 1 arg            | Array type whose length is upto 15             |
+----------+------------------+------------------------------------------------+
| 101xxxxx | ret + args       | Function type whose number of arguments is     |
|          |                  | upto 31                                        |
+----------+------------------+------------------------------------------------+
| 11000000 |                  | never, bool, char, u8, i8, u16, i16, u32, i32, |
| -        |                  | u64, i64, f32, f64, str                        |
| 11001101 |                  |                                                |
+----------+------------------+------------------------------------------------+
| 11001110 | 1 byte + args    | Tuple type whose length is upto 255            |
+----------+------------------+------------------------------------------------+
| 11001111 | 1 byte + 1 arg   | Array type whose length is upto 255            |
+----------+------------------+------------------------------------------------+
| 11010000 | 2 byte + 1 arg   | Array type whose length is upto 2^16-1         |
+----------+------------------+------------------------------------------------+
| 11010001 | 4 byte + 1 arg   | Array type whose length is upto 2^32-1         |
+----------+------------------+------------------------------------------------+
| 11010010 | 1 byte + args    | User defined type whose index is upto 255      |
+----------+------------------+------------------------------------------------+
| 11010011 | 2 byte + args    | User defined type whose index is upto 2^16-1   |
+----------+------------------+------------------------------------------------+
| 11010100 | 4 byte + args    | User defined type whose index is upto 2^32-1   |
+----------+------------------+------------------------------------------------+
| 11010101 | arg              | Slice type                                     |
+----------+------------------+------------------------------------------------+
| 11010110 | arg              | Reference type                                 |
+----------+------------------+------------------------------------------------+
| 11010111 | arg              | Mutable reference type                         |
+----------+------------------+------------------------------------------------+
| 11011000 | arg              | Raw pointer type                               |
+----------+------------------+------------------------------------------------+
| 11011001 | arg              | Mutable raw pointer type                       |
+----------+------------------+------------------------------------------------+
| 11011010 | 1 byte +         | Function type whose number of arguments is     |
|          | ret + args       | upto 255                                       |
+----------+------------------+------------------------------------------------+
| 11011011 |                  | reserved                                       |
| -        |                  |                                                |
| 11111110 |                  |                                                |
+----------+------------------+------------------------------------------------+
| 11111111 |                  | Obect file type                                |
+----------+------------------+------------------------------------------------+

Encoding of Values
==================

**The byte-order is always little endian.**

+----------+----------+------------------+-------------------------------------+
| type     | 1st byte | following bytes  |                                     |
+==========+==========+==================+=====================================+
| u8       | 0xxxxxxx |                  | 7-bit unsigned int                  |
+----------+----------+------------------+-------------------------------------+
| register | 1000xxxx |                  | Register whose index is upto 15     |
+----------+----------+------------------+-------------------------------------+
| tuple    | 1001xxxx | xxx objects      | Tuple whose length is upto 15       |
+----------+----------+------------------+-------------------------------------+
| str      | 101xxxxx | xxxxx bytes      | UTF-8 string upto 31 bytes          |
+----------+----------+------------------+-------------------------------------+
| none     | 11000000 |                  |                                     |
+----------+----------+------------------+-------------------------------------+
| true     | 11000001 |                  |                                     |
+----------+----------+------------------+-------------------------------------+
| false    | 11000010 |                  |                                     |
+----------+----------+------------------+-------------------------------------+
| u8       | 11000011 | 1 byte           | 8-bit unsigned int                  |
+----------+----------+------------------+-------------------------------------+
| i8       | 11000100 | 1 byte           | 8-bit signed int                    |
+----------+----------+------------------+-------------------------------------+
| u16      | 11000101 | 2 byte           | 16-bit unsigned int                 |
+----------+----------+------------------+-------------------------------------+
| i16      | 11000110 | 2 byte           | 16-bit signed int                   |
+----------+----------+------------------+-------------------------------------+
| u32      | 11000111 | 4 byte           | 32-bit unsigned int                 |
+----------+----------+------------------+-------------------------------------+
| i32      | 11001000 | 4 byte           | 32-bit signed int                   |
+----------+----------+------------------+-------------------------------------+
| u64      | 11001001 | 8 byte           | 64-bit unsigned int                 |
+----------+----------+------------------+-------------------------------------+
| i64      | 11001010 | 8 byte           | 64-bit signed int                   |
+----------+----------+------------------+-------------------------------------+
| f32      | 11001011 | 4 byte           | IEEE754 single-precision float      |
+----------+----------+------------------+-------------------------------------+
| f64      | 11001100 | 8 byte           | IEEE754 double-precision float      |
+----------+----------+------------------+-------------------------------------+
| char     | 11001101 | uint object      | UTF-8 character                     |
+----------+----------+------------------+-------------------------------------+
| str      | 11001110 | 1 byte + data    | UTF-8 string whose length is        |
|          |          |                  | upto 2^8-1 bytes                    |
+----------+----------+------------------+-------------------------------------+
| str      | 11001111 | 2 byte + data    | UTF-8 string whose length is        |
|          |          |                  | upto 2^16-1 bytes                   |
+----------+----------+------------------+-------------------------------------+
| str      | 11010000 | 4 byte + data    | UTF-8 string whose length is        |
|          |          |                  | upto 2^32-1 bytes                   |
+----------+----------+------------------+-------------------------------------+
| tuple    | 11010001 | 1 byte + objects | Tuple whose length is upto 255      |
+----------+----------+------------------+-------------------------------------+
| array    | 11010010 | 1 byte + objects | Array whose length is upto 255      |
+----------+----------+------------------+-------------------------------------+
| array    | 11010011 | 2 byte + objects | Array whose length is upto 2^16-1   |
+----------+----------+------------------+-------------------------------------+
| array    | 11010100 | 4 byte + objects | Array whose length is upto 2^32-1   |
+----------+----------+------------------+-------------------------------------+
| register | 11010101 | 1 byte           | Register whose index is upto 255    |
+----------+----------+------------------+-------------------------------------+
| register | 11010110 | 2 byte           | Register whose index is upto 2^16-1 |
+----------+----------+------------------+-------------------------------------+
| reserved | 11010111 |                  |                                     |
+----------+----------+------------------+-------------------------------------+
| reserved | 11011110 |                  |                                     |
+----------+----------+------------------+-------------------------------------+
| user     | 11011111 | type + bytes     | User defined serializable data      |
+----------+----------+------------------+-------------------------------------+
| i8       | 111xxxxx |                  | 5-bit signed int                    |
+----------+----------+------------------+-------------------------------------+


File Format
===========

::

   Object file
   +----------+----------+---------+~~~~~~~~~~~~+
   | 11011111 | 11111111 | uint(n) | n sections |
   +----------+----------+---------+~~~~~~~~~~~~+

Sections
========

ID table
--------

Identifiers used for variables, constants, functions, types, etc.::

   +------+~~~~~~~~~+~~~~~~~~~~~~~~~+
   | 0x00 | uint(n) | n str objects |
   +------+~~~~~~~~~+~~~~~~~~~~~~~~~+

Export table
------------

Table of variables, constants, functions, types, etc. which are exported.
Each uint pair represents kind of exported ID and the index of the ID.
The kind of ID is one of following ascii code.

- 'V': variable
- 'C': constant
- 'F': function
- 'G': generic function
- 'T': type

::

   +------+~~~~~~~~~+~~~~~~~~~~~+
   | 0x01 | uint(n) | 2*n uints |
   +------+~~~~~~~~~+~~~~~~~~~~~+

Function table
--------------

::

   +------+~~~~~~~~~+~~~~~~~~~~~~~+
   | 0x02 | uint(n) | n functions |
   +------+~~~~~~~~~+~~~~~~~~~~~~~+

   Each function consists of its type and basic blocks.
   Block 0 is always the entry and block n-1 is the exit.
   +~~~~~~+~~~~~~~~~+~~~~~~~~~~~~~~~~+
   | type | uint(n) | n basic blocks |
   +~~~~~~+~~~~~~~~~+~~~~~~~~~~~~~~~~+

   Each basic block consists of zero or more non-branch
   instructions and one branch instruction.
   +~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~+
   | uint (n) | n non-branch instructions | branch instruction |
   +~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~~~~~~~~+~~~~~~~~~~~~~~~~~~~~+

See `Instructions <instruction.rst>`_ for encoding of instructions.

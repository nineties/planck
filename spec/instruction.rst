===============
Instruction Set
===============

Non-Branch Instructions
=======================

::

   +----------+----------+-----------------+--------------------------------+
   | name     | 1st byte | following bytes |                                |
   +==========+==========+=================+================================+
   | nop      | 00000000 |                 | do nothing                     |
   +----------+----------+-----------------+--------------------------------+
   | phi      | 00000001 | see below       | lhs = phi(...)                 |
   +----------+----------+-----------------+--------------------------------+
   | move     | 00000010 | lhs,rhs         | lhs = rhs                      |
   +----------+----------+-----------------+--------------------------------+
   | add      | 00000011 | lhs,arg0,arg1   | lhs = arg0 + arg1              |
   +----------+----------+-----------------+--------------------------------+
   | sub      | 00000100 | lhs,arg0,arg1   | lhs = arg0 - arg1              |
   +----------+----------+-----------------+--------------------------------+
   | mul      | 00000101 | lhs,arg0,arg1   | lhs = arg0 * arg1              |
   +----------+----------+-----------------+--------------------------------+
   | div      | 00000110 | lhs,arg0,arg1   | lhs = arg0 / arg1              |
   +----------+----------+-----------------+--------------------------------+
   | mod      | 00000111 | lhs,arg0,arg1   | lhs = arg0 mod arg1            |
   +----------+----------+-----------------+--------------------------------+
   | and      | 00001000 | lhs,arg0,arg1   | lhs = arg0 & arg1              |
   +----------+----------+-----------------+--------------------------------+
   | or       | 00001001 | lhs,arg0,arg1   | lhs = arg0 | arg1              |
   +----------+----------+-----------------+--------------------------------+
   | xor      | 00001010 | lhs,arg0,arg1   | lhs = arg0 ^ arg1              |
   +----------+----------+-----------------+--------------------------------+
   | eq       | 00001011 | lhs,arg0,arg1   | lhs = arg0 == arg1             |
   +----------+----------+-----------------+--------------------------------+
   | ne       | 00001100 | lhs,arg0,arg1   | lhs = arg0 != arg1             |
   +----------+----------+-----------------+--------------------------------+
   | lt       | 00001101 | lhs,arg0,arg1   | lhs = arg0 < arg1              |
   +----------+----------+-----------------+--------------------------------+
   | le       | 00001110 | lhs,arg0,arg1   | lhs = arg0 <= arg1             |
   +----------+----------+-----------------+--------------------------------+
   |          | 00001011 |                 |                                |
   |          |    -     |                 | reserved                       |
   |          | 00011111 |                 |                                |
   +----------+----------+-----------------+--------------------------------+
   | lcall    | 00100000 | see below       | local function call            |
   +----------+----------+-----------------+--------------------------------+
   | ecall    | 00100001 | see below       | external function call         |
   +----------+----------+-----------------+--------------------------------+
   |          | 00100001 |                 |                                |
   |          |    -     |                 | reserved                       |
   |          | 00101111 |                 |                                |
   +----------+----------+-----------------+--------------------------------+
   | tuple    | 0011xxxx | lhs,arg0,...    | tuple (length < 16)            |
   +----------+----------+-----------------+--------------------------------+
   | tuple at | 0100xxxx | lhs,arg         | tuple (length < 16)            |
   +----------+----------+-----------------+--------------------------------+
   | tuple    | 01010000 | lhs,len,arg0,.. | tuple (length < 256)           |
   +----------+----------+-----------------+--------------------------------+
   | tuple at | 01010001 | lhs,arg,index   | tuple (length < 256)           |
   +----------+----------+-----------------+--------------------------------+
   |          | 01010010 |                 |                                |
   |          |    -     |                 | reserved                       |
   |          | 01011111 |                 |                                |
   +----------+----------+-----------------+--------------------------------+
   | load     | 01100000 | lhs,uint(i)     | load global variable (i)       |
   +----------+----------+-----------------+--------------------------------+
   | store    | 01100001 | uint(i),rhs     | store to global variable (i)   |
   +----------+----------+-----------------+--------------------------------+

Phi instruction::

   Phi instruction is a special purpose instruction used in SSA form.
   The semantics of

   lhs = phi(i0:rhs0, i1:rhs1, ...)

   is that when the index of preceding basic block is i0, the value of lhs is
   rhs0 and so on.

   +----------+~~~~~+~~~~~~~~~~+~~~~~~~~~~~~~~~~~+
   | 00000001 | lhs | uint (n) | n x (uint, rhs) |
   +----------+~~~~~+~~~~~~~~~~+~~~~~~~~~~~~~~~~~+

Function calls::

   * Local function call

   Calling a function in the same object file.

   lhs = f(arg0, arg1, ...)

   +----------+~~~~~+~~~~~~~~~~+~~~~~~~~~~+~~~~~~~~~~+
   | 00100000 | lhs | uint (f) | uint (n) | n x args |
   +----------+~~~~~+~~~~~~~~~~+~~~~~~~~~~+~~~~~~~~~~+

   f is the index of the function in the object file.


   * External function call

   Calling a function of other module.
   lhs == <module name(m)>::f(arg0, arg1, ...)

   +----------+~~~~~+~~~~~~~~~~+~~~~~~~~~~+~~~~~~~~~~+~~~~~~~~~~+
   | 00100001 | lhs | uint (m) | uint (f) | uint (n) | n x args |
   +----------+~~~~~+~~~~~~~~~~+~~~~~~~~~~+~~~~~~~~~~+~~~~~~~~~~+

   m is the index of module name in ID table section.
   f is also the index of function name in the section.


Branch Instructions
===================

::

   +---------+----------+-----------------+------------------------------------+
   | name    | 1st byte | following bytes |                                    |
   +=========+==========+=================+====================================+
   | goto    | 10000000 | uint(i)         | do nothing, proceed to the         |
   |         |          |                 | basic block i.                     |
   +---------+----------+-----------------+------------------------------------+
   | return  | 10000001 | operand         | return from function               |
   +---------+----------+-----------------+------------------------------------+
   | if-true | 10000010 | opd,            | jump to block i if true            |
   |         |          | uint(i),uint(j) | otherwise to block j               |
   +---------+----------+-----------------+------------------------------------+
   | if-eq   | 10000011 | opd0,opd1,      | jump to block i if opd0 == opd1    |
   |         |          | uint(i),uint(j) | otherwise to block j               |
   +---------+----------+-----------------+------------------------------------+
   | if-ne   | 10000100 | opd0,opd1,      | jump to block i if opd0 != opd1    |
   |         |          | uint(i),uint(j) | otherwise to block j               |
   +---------+----------+-----------------+------------------------------------+
   | if-lt   | 10000101 | opd0,opd1,      | jump to block i if opd0 < opd1     |
   |         |          | uint(i),uint(j) | otherwise to block j               |
   +---------+----------+-----------------+------------------------------------+
   | if-le   | 10000110 | opd0,opd1,      | jump to block i if opd0 <= opd1    |
   |         |          | uint(i),uint(j) | otherwise to block j               |
   +---------+----------+-----------------+------------------------------------+
